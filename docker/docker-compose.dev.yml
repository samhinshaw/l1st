version: '3.7'

services:
  ui:
    # Build the Dockerfile in the docker/list folder, but build it with the
    # "working directory" (the context) set to the root of the repository so we
    # have access to the full source code.
    build:
      context: ../
      dockerfile: docker/list/Dockerfile
    image: list:latest
    container_name: list_ui
    # Set the NODE_ENV to the dev environment
    environment:
      - NODE_ENV=development
      # Tell Parcel how to listen for fs changes in volume-mount
      - CHOKIDAR_USEPOLLING=1
    command: ['npm', 'run', 'dev:ui']
    ports:
      - '1234:1234'
    # Mount the codebase to the container for live-reloading
    volumes:
      - ../:/app/
      # Mount nothing to the node_modules folder so that the results of the
      # image build do not get overwritten. (Trailing slash important.) This SO
      # post contains a few different techniques for tackling this problem, as
      # well as the solution I've used here:
      # https://stackoverflow.com/questions/29181032/add-a-volume-to-docker-but-exclude-a-sub-folder
      - /app/node_modules/
  backend:
    # We've already built this once, so just reuse the image we built for the UI container
    image: list:latest
    container_name: list_backend
    # Set the NODE_ENV to the dev environment
    environment:
      - NODE_ENV=development
      # Tell Parcel how to listen for fs changes in volume-mount
      - CHOKIDAR_USEPOLLING=1
    command: ['npm', 'run', 'dev:backend']
    ports:
      - '9924:9924'
    # Mount the codebase to the container for live-reloading
    volumes:
      - ../:/app/
      # Mount nothing to the node_modules folder so that the results of the
      # image build do not get overwritten. (Trailing slash important.) This SO
      # post contains a few different techniques for tackling this problem, as
      # well as the solution I've used here:
      # https://stackoverflow.com/questions/29181032/add-a-volume-to-docker-but-exclude-a-sub-folder
      - /app/node_modules/
